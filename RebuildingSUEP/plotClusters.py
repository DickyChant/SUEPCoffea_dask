import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os

filenames = os.listdir('/eos/user/g/gdecastr/SUEPCoffea_dask/RebuildingSUEP/csvs_Private')

kT_files = [filename for filename in filenames if filename.endswith('kT.csv')]
Ak_files = [filename for filename in filenames if filename.endswith('Ak.csv')]
Strip_files = [filename for filename in filenames if filename.endswith('Strip.csv')]
Cam_files = [filename for filename in filenames if filename.endswith('Cambridge.csv')]


##### kT
kTFrames = []
for file in kT_files:
    df = pd.read_csv('/eos/user/g/gdecastr/SUEPCoffea_dask/RebuildingSUEP/csvs_Private/' + file)
    kTFrames.append(df)

combined_kT = pd.concat(kTFrames, ignore_index=True)

plt.hist(combined_kT['kT20DeltaR2'], bins = np.linspace(0,2,30), label = r'kT $r = 2.0$', histtype='step', density = True)
plt.hist(combined_kT['kT15DeltaR2'], bins = np.linspace(0,2,30), label = r'kT $r = 1.5$', histtype='step', density = True)
plt.hist(combined_kT['kT12DeltaR2'], bins =  np.linspace(0,2,30), label = r'kT $r = 1.2$', histtype='step', density = True)
plt.hist(combined_kT['kT1DeltaR2'], bins =  np.linspace(0,2,30), label = r'kT $r = 1.0$', histtype='step', density = True)
plt.hist(combined_kT['kT8DeltaR2'], bins =  np.linspace(0,2,30), label = r'kT $r = 0.8$', histtype='step', density = True)
plt.title(r'$dR^2$ between Cluster and Gen Higgs for Varying Cone Sizes')
plt.xlabel(r'$dR^2$')
plt.text(.3, 4.5, r"$r = 2.0:\;\mu$ = " + str(round(combined_kT['kT20DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_kT['kT20DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['kT20DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['kT20DeltaR2'].mean()/combined_kT['kT20DeltaR2'].std(),2)), size = 8)
plt.text(.3, 4, r"$r = 1.5:\;\mu$ = " + str(round(combined_kT['kT15DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_kT['kT15DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['kT15DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['kT15DeltaR2'].mean()/combined_kT['kT15DeltaR2'].std(),2)), size = 8)
plt.text(.3, 3.5, r"$r = 1.2:\;\mu$ = " + str(round(combined_kT['kT12DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_kT['kT12DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['kT12DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['kT12DeltaR2'].mean()/combined_kT['kT12DeltaR2'].std(),2)), size = 8)
plt.text(.3, 3, r"$r = 1.0:\;\mu$ = " + str(round(combined_kT['kT1DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_kT['kT1DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['kT1DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['kT1DeltaR2'].mean()/combined_kT['kT1DeltaR2'].std(),2)), size = 8)
plt.text(.3, 2.5, r"$r = 0.8:\;\mu$ = " + str(round(combined_kT['kT8DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_kT['kT8DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['kT8DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['kT8DeltaR2'].mean()/combined_kT['kT8DeltaR2'].std(),2)), size = 8)
plt.ylabel('Frequency')
plt.xlim(0,2)
plt.legend()
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/kTdR2.png')

plt.clf()

plt.hist(combined_kT['kT20BetaRes'], bins = np.linspace(-1,1,30), label = r'kT $r = 2.0$', histtype='step', density = True)
plt.hist(combined_kT['kT15BetaRes'], bins = np.linspace(-1,1,30), label = r'kT $r = 1.5$', histtype='step', density = True)
plt.hist(combined_kT['kT12BetaRes'], bins = np.linspace(-1,1,30), label = r'kT $r = 1.2$', histtype='step', density = True)
plt.hist(combined_kT['kT10BetaRes'], bins = np.linspace(-1,1,30), label = r'kT $r = 1.0$', histtype='step', density = True)
plt.hist(combined_kT['kT8BetaRes'], bins = np.linspace(-1,1,30), label = r'kT $r = 0.8$', histtype='step', density = True)
plt.text(.2, 4, r"$r = 2.0:\;\mu$ = " + str(round(combined_kT['kT20BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_kT['kT20BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['kT20BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['kT20BetaRes'].mean()/combined_kT['kT20BetaRes'].std(),2)), size = 6)
plt.text(.2,3.75, r"$r = 1.5:\;\mu$ = " + str(round(combined_kT['kT15BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_kT['kT15BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['kT15BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['kT15BetaRes'].mean()/combined_kT['kT15BetaRes'].std(),2)), size = 6)
plt.text(.2, 3.5, r"$r = 1.2:\;\mu$ = " + str(round(combined_kT['kT12BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_kT['kT12BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['kT12BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['kT12BetaRes'].mean()/combined_kT['kT12BetaRes'].std(),2)), size = 6)
plt.text(.2, 3.25, r"$r = 1.0:\;\mu$ = " + str(round(combined_kT['kT10BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_kT['kT10BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['kT10BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['kT10BetaRes'].mean()/combined_kT['kT10BetaRes'].std(),2)), size = 6)
plt.text(.2, 3, r"$r = 0.8:\;\mu$ = " + str(round(combined_kT['kT8BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_kT['kT8BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['kT8BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['kT8BetaRes'].mean()/combined_kT['kT8BetaRes'].std(),2)), size = 6)
plt.title(r'$\beta$ resolution between Cluster and Gen Higgs for Varying Cone Sizes')
plt.xlabel(r'$\frac{\beta_{kT} - \beta_{Gen}}{\beta_{Gen}}$')
plt.ylabel('Frequency')
plt.legend()
plt.xlim(-.5,1)
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/kTBetaRes.png')

plt.clf()

plt.hist(combined_kT['LeadingkT20Purity'], bins = np.linspace(0,1,30), label = r'kT $r = 2.0$', histtype='step', density = True)
plt.hist(combined_kT['LeadingkT15Purity'], bins = np.linspace(0,1,30), label = r'kT $r = 1.5$', histtype='step', density = True)
plt.hist(combined_kT['LeadingkT12Purity'], bins = np.linspace(0,1,30), label = r'kT $r = 1.2$', histtype='step', density = True)
plt.hist(combined_kT['LeadingkT10Purity'], bins = np.linspace(0,1,30), label = r'kT $r = 1.0$', histtype='step', density = True)
plt.hist(combined_kT['LeadingkT8Purity'], bins = np.linspace(0,1,30), label = r'kT $r = 0.8$', histtype='step', density = True)
plt.text(.3, 4.5, r"$r = 2.0:\;\mu$ = " + str(round(combined_kT['LeadingkT20Purity'].mean(),2)) + r', $M = $' + str(round(combined_kT['LeadingkT20Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['LeadingkT20Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['LeadingkT20Purity'].mean()/combined_kT['LeadingkT20Purity'].std(),2)), size = 8)
plt.text(.3, 4, r"$r = 1.5:\;\mu$ = " + str(round(combined_kT['LeadingkT15Purity'].mean(),2)) + r', $M = $' + str(round(combined_kT['LeadingkT15Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['LeadingkT15Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['LeadingkT15Purity'].mean()/combined_kT['LeadingkT15Purity'].std(),2)), size = 8)
plt.text(.3, 3.5, r"$r = 1.2:\;\mu$ = " + str(round(combined_kT['LeadingkT12Purity'].mean(),2)) + r', $M = $' + str(round(combined_kT['LeadingkT12Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['LeadingkT12Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['LeadingkT12Purity'].mean()/combined_kT['LeadingkT12Purity'].std(),2)), size = 8)
plt.text(.3, 3, r"$r = 1.0:\;\mu$ = " + str(round(combined_kT['LeadingkT10Purity'].mean(),2)) + r', $M = $' + str(round(combined_kT['LeadingkT10Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['LeadingkT10Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['LeadingkT10Purity'].mean()/combined_kT['LeadingkT10Purity'].std(),2)), size = 8)
plt.text(.3, 2.5, r"$r = 0.8:\;\mu$ = " + str(round(combined_kT['LeadingkT8Purity'].mean(),2)) + r', $M = $' + str(round(combined_kT['LeadingkT8Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['LeadingkT8Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['LeadingkT8Purity'].mean()/combined_kT['LeadingkT8Purity'].std(),2)), size = 8)
plt.title(r'Purity for Varying kT Algorithm Cone Sizes')
plt.xlabel(r'Purity')
plt.ylabel('Frequency')
plt.legend(loc = 'upper center')
plt.xlim(0,1)
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/kTPurity.png')

plt.clf()

plt.hist(combined_kT['LeadingkT20Eff'], bins = np.linspace(0,1,30), label = r'kT $r = 2.0$', histtype='step', density = True)
plt.hist(combined_kT['LeadingkT15Eff'], bins = np.linspace(0,1,30), label = r'kT $r = 1.5$', histtype='step', density = True)
plt.hist(combined_kT['LeadingkT12Eff'], bins = np.linspace(0,1,30), label = r'kT $r = 1.2$', histtype='step', density = True)
plt.hist(combined_kT['LeadingkT10Eff'], bins = np.linspace(0,1,30), label = r'kT $r = 1.0$', histtype='step', density = True)
plt.hist(combined_kT['LeadingkT8Eff'], bins = np.linspace(0,1,30), label = r'kT $r = 0.8$', histtype='step', density = True)
plt.text(.3, 4.5, r"$r = 2.0:\;\mu$ = " + str(round(combined_kT['LeadingkT20Eff'].mean(),2)) + r', $M = $' + str(round(combined_kT['LeadingkT20Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['LeadingkT20Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['LeadingkT20Eff'].mean()/combined_kT['LeadingkT20Eff'].std(),2)), size = 8)
plt.text(.3, 4, r"$r = 1.5:\;\mu$ = " + str(round(combined_kT['LeadingkT15Eff'].mean(),2)) + r', $M = $' + str(round(combined_kT['LeadingkT15Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['LeadingkT15Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['LeadingkT15Eff'].mean()/combined_kT['LeadingkT15Eff'].std(),2)), size = 8)
plt.text(.3, 3.5, r"$r = 1.2:\;\mu$ = " + str(round(combined_kT['LeadingkT12Eff'].mean(),2)) + r', $M = $' + str(round(combined_kT['LeadingkT12Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['LeadingkT12Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['LeadingkT12Eff'].mean()/combined_kT['LeadingkT12Eff'].std(),2)), size = 8)
plt.text(.3, 3, r"$r = 1.0:\;\mu$ = " + str(round(combined_kT['LeadingkT10Eff'].mean(),2)) + r', $M = $' + str(round(combined_kT['LeadingkT10Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['LeadingkT10Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['LeadingkT10Eff'].mean()/combined_kT['LeadingkT10Eff'].std(),2)), size = 8)
plt.text(.3, 2.5, r"$r = 0.8:\;\mu$ = " + str(round(combined_kT['LeadingkT8Eff'].mean(),2)) + r', $M = $' + str(round(combined_kT['LeadingkT8Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_kT['LeadingkT8Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_kT['LeadingkT8Eff'].mean()/combined_kT['LeadingkT8Eff'].std(),2)), size = 8)
plt.title(r'Efficiency for Varying kT Algorithm Cone Sizes')
plt.xlabel(r'Efficiency')
plt.ylabel('Frequency')
plt.legend(loc = 'upper center')
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/kTEff.png')

plt.clf()

##### Cambridge
CamFrames = []
for file in Cam_files:
    df = pd.read_csv('/eos/user/g/gdecastr/SUEPCoffea_dask/RebuildingSUEP/csvs_Private/' + file)
    CamFrames.append(df)

combined_Cam = pd.concat(CamFrames, ignore_index=True)

plt.hist(combined_Cam['cambridge20DeltaR2'], bins = np.linspace(0,1,30), label = r'Cambridge $r = 2.0$', histtype='step', density = True)
plt.hist(combined_Cam['cambridge15DeltaR2'], bins = np.linspace(0,1,30), label = r'Cambridge $r = 1.5$', histtype='step', density = True)
plt.hist(combined_Cam['cambridge12DeltaR2'], bins =  np.linspace(0,1,30), label = r'Cambridge $r = 1.2$', histtype='step', density = True)
plt.hist(combined_Cam['cambridge1DeltaR2'], bins =  np.linspace(0,1,30), label = r'Cambridge $r = 1.0$', histtype='step', density = True)
plt.hist(combined_Cam['cambridge8DeltaR2'], bins =  np.linspace(0,1,30), label = r'Cambridge $r = 0.8$', histtype='step', density = True)
plt.text(.3, 4.5, r"$r = 2.0:\;\mu$ = " + str(round(combined_Cam['cambridge20DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Cam['cambridge20DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['cambridge20DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['cambridge20DeltaR2'].mean()/combined_Cam['cambridge20DeltaR2'].std(),2)), size = 8)
plt.text(.3, 4, r"$r = 1.5:\;\mu$ = " + str(round(combined_Cam['cambridge15DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Cam['cambridge15DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['cambridge15DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['cambridge15DeltaR2'].mean()/combined_Cam['cambridge15DeltaR2'].std(),2)), size = 8)
plt.text(.3, 3.5, r"$r = 1.2:\;\mu$ = " + str(round(combined_Cam['cambridge12DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Cam['cambridge12DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['cambridge12DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['cambridge12DeltaR2'].mean()/combined_Cam['cambridge12DeltaR2'].std(),2)), size = 8)
plt.text(.3, 3, r"$r = 1.0:\;\mu$ = " + str(round(combined_Cam['cambridge1DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Cam['cambridge1DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['cambridge1DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['cambridge1DeltaR2'].mean()/combined_Cam['cambridge1DeltaR2'].std(),2)), size = 8)
plt.text(.3, 2.5, r"$r = 0.8:\;\mu$ = " + str(round(combined_Cam['cambridge8DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Cam['cambridge8DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['cambridge8DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['cambridge8DeltaR2'].mean()/combined_Cam['cambridge8DeltaR2'].std(),2)), size = 8)
plt.title(r'$dR^2$ between Cluster and Gen Higgs for Varying Cone Sizes')
plt.xlabel(r'$dR^2$')
plt.ylabel('Frequency')
plt.xlim(0,1)
plt.legend()
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/CamdR2.png')

plt.clf()

plt.hist(combined_Cam['cambridge20BetaRes'], bins = np.linspace(-.5,1,30), label = r'Cambridge $r = 2.0$', histtype='step', density = True)
plt.hist(combined_Cam['cambridge15BetaRes'], bins = np.linspace(-.5,1,30), label = r'Cambridge $r = 1.5$', histtype='step', density = True)
plt.hist(combined_Cam['cambridge12BetaRes'], bins = np.linspace(-.5,1,30), label = r'Cambridge $r = 1.2$', histtype='step', density = True)
plt.hist(combined_Cam['cambridge10BetaRes'], bins = np.linspace(-.5,1,30), label = r'Cambridge $r = 1.0$', histtype='step', density = True)
plt.hist(combined_Cam['cambridge8BetaRes'], bins = np.linspace(-.5,1,30), label = r'Cambridge $r = 0.8$', histtype='step', density = True)
plt.text(.2, 3.75, r"$r = 2.0:\;\mu$ = " + str(round(combined_Cam['cambridge20BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Cam['cambridge20BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['cambridge20BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['cambridge20BetaRes'].mean()/combined_Cam['cambridge20BetaRes'].std(),2)), size = 8)
plt.text(.2, 3.5, r"$r = 1.5:\;\mu$ = " + str(round(combined_Cam['cambridge15BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Cam['cambridge15BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['cambridge15BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['cambridge15BetaRes'].mean()/combined_Cam['cambridge15BetaRes'].std(),2)), size = 8)
plt.text(.2, 3.25, r"$r = 1.2:\;\mu$ = " + str(round(combined_Cam['cambridge12BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Cam['cambridge12BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['cambridge12BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['cambridge12BetaRes'].mean()/combined_Cam['cambridge12BetaRes'].std(),2)), size = 8)
plt.text(.2, 3, r"$r = 1.0:\;\mu$ = " + str(round(combined_Cam['cambridge10BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Cam['cambridge10BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['cambridge10BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['cambridge10BetaRes'].mean()/combined_Cam['cambridge10BetaRes'].std(),2)), size = 8)
plt.text(.2, 2.75, r"$r = .8:\;\mu$ = " + str(round(combined_Cam['cambridge8BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Cam['cambridge8BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['cambridge8BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['cambridge8BetaRes'].mean()/combined_Cam['cambridge8BetaRes'].std(),2)), size = 8)
plt.title(r'$\beta$ resolution between Cluster and Gen Higgs for Varying Cone Sizes')
plt.xlabel(r'$\frac{\beta_{Cam} - \beta_{Gen}}{\beta_{Gen}}$')
plt.ylabel('Frequency')
plt.legend()
plt.xlim(-.5,1)
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/CamBetaRes.png')

plt.clf()

plt.hist(combined_Cam['Leadingcambridge20Purity'], bins = np.linspace(0,1,30), label = r'Cambridge $r = 2.0$', histtype='step', density = True)
plt.hist(combined_Cam['Leadingcambridge15Purity'], bins = np.linspace(0,1,30), label = r'Cambridge $r = 1.5$', histtype='step', density = True)
plt.hist(combined_Cam['Leadingcambridge12Purity'], bins = np.linspace(0,1,30), label = r'Cambridge $r = 1.2$', histtype='step', density = True)
plt.hist(combined_Cam['Leadingcambridge10Purity'], bins = np.linspace(0,1,30), label = r'Cambridge $r = 1.0$', histtype='step', density = True)
plt.hist(combined_Cam['Leadingcambridge8Purity'], bins = np.linspace(0,1,30), label = r'Cambridge $r = 0.8$', histtype='step', density = True)
plt.text(.2, 6, r"$r = 2.0:\;\mu$ = " + str(round(combined_Cam['Leadingcambridge20Purity'].mean(),2)) + r', $M = $' + str(round(combined_Cam['Leadingcambridge20Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['Leadingcambridge20Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['Leadingcambridge20Purity'].mean()/combined_Cam['Leadingcambridge20Purity'].std(),2)), size = 8)
plt.text(.2, 5.5, r"$r = 1.5:\;\mu$ = " + str(round(combined_Cam['Leadingcambridge15Purity'].mean(),2)) + r', $M = $' + str(round(combined_Cam['Leadingcambridge15Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['Leadingcambridge15Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['Leadingcambridge15Purity'].mean()/combined_Cam['Leadingcambridge15Purity'].std(),2)), size = 8)
plt.text(.2, 5, r"$r = 1.2:\;\mu$ = " + str(round(combined_Cam['Leadingcambridge12Purity'].mean(),2)) + r', $M = $' + str(round(combined_Cam['Leadingcambridge12Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['Leadingcambridge12Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['Leadingcambridge12Purity'].mean()/combined_Cam['Leadingcambridge12Purity'].std(),2)), size = 8)
plt.text(.2, 4.5, r"$r = 1.0:\;\mu$ = " + str(round(combined_Cam['Leadingcambridge10Purity'].mean(),2)) + r', $M = $' + str(round(combined_Cam['Leadingcambridge10Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['Leadingcambridge10Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['Leadingcambridge10Purity'].mean()/combined_Cam['Leadingcambridge10Purity'].std(),2)), size = 8)
plt.text(.2, 4, r"$r = 0.8:\;\mu$ = " + str(round(combined_Cam['Leadingcambridge8Purity'].mean(),2)) + r', $M = $' + str(round(combined_Cam['Leadingcambridge8Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['Leadingcambridge8Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['Leadingcambridge8Purity'].mean()/combined_Cam['Leadingcambridge8Purity'].std(),2)), size = 8)
plt.title(r'Purity for Varying Cambridge Algorithm Cone Sizes')
plt.xlabel(r'Purity')
plt.ylabel('Frequency')
plt.legend(loc = 'upper center')
plt.xlim(0,1)
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/CamPurity.png')

plt.clf()

plt.hist(combined_Cam['Leadingcambridge20Eff'], bins = np.linspace(0,1,30), label = r'Cambridge $r = 2.0$', histtype='step', density = True)
plt.hist(combined_Cam['Leadingcambridge15Eff'], bins = np.linspace(0,1,30), label = r'Cambridge $r = 1.5$', histtype='step', density = True)
plt.hist(combined_Cam['Leadingcambridge12Eff'], bins = np.linspace(0,1,30), label = r'Cambridge $r = 1.2$', histtype='step', density = True)
plt.hist(combined_Cam['Leadingcambridge10Eff'], bins = np.linspace(0,1,30), label = r'Cambridge $r = 1.0$', histtype='step', density = True)
plt.hist(combined_Cam['Leadingcambridge8Eff'], bins = np.linspace(0,1,30), label = r'Cambridge $r = 0.8$', histtype='step', density = True)
plt.text(.2, 4.5, r"$r = 2.0:\;\mu$ = " + str(round(combined_Cam['Leadingcambridge20Eff'].mean(),2)) + r', $M = $' + str(round(combined_Cam['Leadingcambridge20Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['Leadingcambridge20Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['Leadingcambridge20Eff'].mean()/combined_Cam['Leadingcambridge20Eff'].std(),2)), size = 8)
plt.text(.2, 4, r"$r = 1.5:\;\mu$ = " + str(round(combined_Cam['Leadingcambridge15Eff'].mean(),2)) + r', $M = $' + str(round(combined_Cam['Leadingcambridge15Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['Leadingcambridge15Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['Leadingcambridge15Eff'].mean()/combined_Cam['Leadingcambridge15Eff'].std(),2)), size = 8)
plt.text(.2, 3.5, r"$r = 1.2:\;\mu$ = " + str(round(combined_Cam['Leadingcambridge12Eff'].mean(),2)) + r', $M = $' + str(round(combined_Cam['Leadingcambridge12Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['Leadingcambridge12Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['Leadingcambridge12Eff'].mean()/combined_Cam['Leadingcambridge12Eff'].std(),2)), size = 8)
plt.text(.2, 3, r"$r = 1.0:\;\mu$ = " + str(round(combined_Cam['Leadingcambridge10Eff'].mean(),2)) + r', $M = $' + str(round(combined_Cam['Leadingcambridge10Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['Leadingcambridge10Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['Leadingcambridge10Eff'].mean()/combined_Cam['Leadingcambridge10Eff'].std(),2)), size = 8)
plt.text(.2, 2.5, r"$r = 0.8:\;\mu$ = " + str(round(combined_Cam['Leadingcambridge8Eff'].mean(),2)) + r', $M = $' + str(round(combined_Cam['Leadingcambridge8Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Cam['Leadingcambridge8Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Cam['Leadingcambridge8Eff'].mean()/combined_Cam['Leadingcambridge8Eff'].std(),2)), size = 8)
plt.title(r'Efficiency for Varying Cambridge Algorithm Cone Sizes')
plt.xlabel(r'Efficiency')
plt.ylabel('Frequency')
plt.xlim(0,1)
plt.legend(loc = 'upper center')
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/CamEff.png')

plt.clf()

##### AkT
AkFrames = []
for file in Ak_files:
    df = pd.read_csv('/eos/user/g/gdecastr/SUEPCoffea_dask/RebuildingSUEP/csvs_Private/' + file)
    AkFrames.append(df)

combined_Ak = pd.concat(AkFrames, ignore_index=True)

plt.hist(combined_Ak['Ak20DeltaR2'], bins = np.linspace(0,1,30), label = r'Ak $r = 2.0$', histtype='step', density = True)
plt.hist(combined_Ak['Ak15DeltaR2'], bins = np.linspace(0,1,30), label = r'Ak $r = 1.5$', histtype='step', density = True)
plt.hist(combined_Ak['Ak12DeltaR2'], bins =  np.linspace(0,1,30), label = r'Ak $r = 1.2$', histtype='step', density = True)
plt.hist(combined_Ak['Ak1DeltaR2'], bins =  np.linspace(0,1,30), label = r'Ak $r = 1.0$', histtype='step', density = True)
plt.hist(combined_Ak['Ak8DeltaR2'], bins =  np.linspace(0,1,30), label = r'Ak $r = 0.8$', histtype='step', density = True)
plt.text(.3, 4.5, r"$r = 2.0:\;\mu$ = " + str(round(combined_Ak['Ak20DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Ak['Ak20DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['Ak20DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['Ak20DeltaR2'].mean()/combined_Ak['Ak20DeltaR2'].std(),2)), size = 8)
plt.text(.3, 4, r"$r = 1.5:\;\mu$ = " + str(round(combined_Ak['Ak15DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Ak['Ak15DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['Ak15DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['Ak15DeltaR2'].mean()/combined_Ak['Ak15DeltaR2'].std(),2)), size = 8)
plt.text(.3, 3.5, r"$r = 1.2:\;\mu$ = " + str(round(combined_Ak['Ak12DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Ak['Ak12DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['Ak12DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['Ak12DeltaR2'].mean()/combined_Ak['Ak12DeltaR2'].std(),2)), size = 8)
plt.text(.3, 3, r"$r = 1.0:\;\mu$ = " + str(round(combined_Ak['Ak1DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Ak['Ak1DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['Ak1DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['Ak1DeltaR2'].mean()/combined_Ak['Ak1DeltaR2'].std(),2)), size = 8)
plt.text(.3, 2.5, r"$r = 0.8:\;\mu$ = " + str(round(combined_Ak['Ak8DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Ak['Ak8DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['Ak8DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['Ak8DeltaR2'].mean()/combined_Ak['Ak8DeltaR2'].std(),2)), size = 8)
plt.title(r'$dR^2$ between Cluster and Gen Higgs for Varying Cone Sizes')
plt.xlabel(r'$dR^2$')
plt.ylabel('Frequency')
plt.xlim(0,1)
plt.legend()
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/AkdR2.png')

plt.clf()

plt.hist(combined_Ak['Ak20BetaRes'], bins = np.linspace(-.5,1,30), label = r'Ak $r = 2.0$', histtype='step', density = True)
plt.hist(combined_Ak['Ak15BetaRes'], bins = np.linspace(-.5,1,30), label = r'Ak $r = 1.5$', histtype='step', density = True)
plt.hist(combined_Ak['Ak12BetaRes'], bins = np.linspace(-.5,1,30), label = r'Ak $r = 1.2$', histtype='step', density = True)
plt.hist(combined_Ak['Ak10BetaRes'], bins = np.linspace(-.5,1,30), label = r'Ak $r = 1.0$', histtype='step', density = True)
plt.hist(combined_Ak['Ak8BetaRes'], bins = np.linspace(-.5,1,30), label = r'Ak $r = 0.8$', histtype='step', density = True)
plt.text(.2, 4.0, r"$r = 2.0:\;\mu$ = " + str(round(combined_Ak['Ak20BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Ak['Ak20BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['Ak20BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['Ak20BetaRes'].mean()/combined_Ak['Ak20BetaRes'].std(),2)), size = 8)
plt.text(.2, 3.75, r"$r = 1.5:\;\mu$ = " + str(round(combined_Ak['Ak15BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Ak['Ak15BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['Ak15BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['Ak15BetaRes'].mean()/combined_Ak['Ak15BetaRes'].std(),2)), size = 8)
plt.text(.2, 3.5, r"$r = 1.2:\;\mu$ = " + str(round(combined_Ak['Ak12BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Ak['Ak12BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['Ak12BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['Ak12BetaRes'].mean()/combined_Ak['Ak12BetaRes'].std(),2)), size = 8)
plt.text(.2, 3.25, r"$r = 1.0:\;\mu$ = " + str(round(combined_Ak['Ak10BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Ak['Ak10BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['Ak10BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['Ak10BetaRes'].mean()/combined_Ak['Ak10BetaRes'].std(),2)), size = 8)
plt.text(.2, 3, r"$r = .8:\;\mu$ = " + str(round(combined_Ak['Ak8BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Ak['Ak8BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['Ak8BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['Ak8BetaRes'].mean()/combined_Ak['Ak8BetaRes'].std(),2)), size = 8)
plt.title(r'$\beta$ resolution between Cluster and Gen Higgs for Varying Cone Sizes')
plt.xlabel(r'$\frac{\beta_{Ak} - \beta_{Gen}}{\beta_{Gen}}$')
plt.ylabel('Frequency')
plt.legend()
plt.xlim(-.5,1)
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/AkBetaRes.png')

plt.clf()

plt.hist(combined_Ak['LeadingAk20Purity'], bins = np.linspace(0,1,30), label = r'Ak $r = 2.0$', histtype='step', density = True)
plt.hist(combined_Ak['LeadingAk15Purity'], bins = np.linspace(0,1,30), label = r'Ak $r = 1.5$', histtype='step', density = True)
plt.hist(combined_Ak['LeadingAk12Purity'], bins = np.linspace(0,1,30), label = r'Ak $r = 1.2$', histtype='step', density = True)
plt.hist(combined_Ak['LeadingAk10Purity'], bins = np.linspace(0,1,30), label = r'Ak $r = 1.0$', histtype='step', density = True)
plt.hist(combined_Ak['LeadingAk8Purity'], bins = np.linspace(0,1,30), label = r'Ak $r = 0.8$', histtype='step', density = True)
plt.text(.2, 6.5, r"$r = 2.0:\;\mu$ = " + str(round(combined_Ak['LeadingAk20Purity'].mean(),2)) + r', $M = $' + str(round(combined_Ak['LeadingAk20Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['LeadingAk20Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['LeadingAk20Purity'].mean()/combined_Ak['LeadingAk20Purity'].std(),2)), size = 8)
plt.text(.2, 6, r"$r = 1.5:\;\mu$ = " + str(round(combined_Ak['LeadingAk15Purity'].mean(),2)) + r', $M = $' + str(round(combined_Ak['LeadingAk15Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['LeadingAk15Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['LeadingAk15Purity'].mean()/combined_Ak['LeadingAk15Purity'].std(),2)), size = 8)
plt.text(.2, 5.5, r"$r = 1.2:\;\mu$ = " + str(round(combined_Ak['LeadingAk12Purity'].mean(),2)) + r', $M = $' + str(round(combined_Ak['LeadingAk12Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['LeadingAk12Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['LeadingAk12Purity'].mean()/combined_Ak['LeadingAk12Purity'].std(),2)), size = 8)
plt.text(.2, 5, r"$r = 1.0:\;\mu$ = " + str(round(combined_Ak['LeadingAk10Purity'].mean(),2)) + r', $M = $' + str(round(combined_Ak['LeadingAk10Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['LeadingAk10Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['LeadingAk10Purity'].mean()/combined_Ak['LeadingAk10Purity'].std(),2)), size = 8)
plt.text(.2, 4.5, r"$r = 0.8:\;\mu$ = " + str(round(combined_Ak['LeadingAk8Purity'].mean(),2)) + r', $M = $' + str(round(combined_Ak['LeadingAk8Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['LeadingAk8Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['LeadingAk8Purity'].mean()/combined_Ak['LeadingAk8Purity'].std(),2)), size = 8)
plt.title(r'Purity for Varying Ak Algorithm Cone Sizes')
plt.xlabel(r'Purity')
plt.ylabel('Frequency')
plt.legend(loc = 'upper center')
plt.xlim(0,1)
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/AkPurity.png')

plt.clf()

plt.hist(combined_Ak['LeadingAk20Eff'], bins = np.linspace(0,1,30), label = r'Ak $r = 2.0$', histtype='step', density = True)
plt.hist(combined_Ak['LeadingAk15Eff'], bins = np.linspace(0,1,30), label = r'Ak $r = 1.5$', histtype='step', density = True)
plt.hist(combined_Ak['LeadingAk12Eff'], bins = np.linspace(0,1,30), label = r'Ak $r = 1.2$', histtype='step', density = True)
plt.hist(combined_Ak['LeadingAk10Eff'], bins = np.linspace(0,1,30), label = r'Ak $r = 1.0$', histtype='step', density = True)
plt.hist(combined_Ak['LeadingAk8Eff'], bins = np.linspace(0,1,30), label = r'Ak $r = 0.8$', histtype='step', density = True)
plt.text(.2, 4.5, r"$r = 2.0:\;\mu$ = " + str(round(combined_Ak['LeadingAk20Eff'].mean(),2)) + r', $M = $' + str(round(combined_Ak['LeadingAk20Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['LeadingAk20Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['LeadingAk20Eff'].mean()/combined_Ak['LeadingAk20Eff'].std(),2)), size = 8)
plt.text(.2, 4, r"$r = 1.5:\;\mu$ = " + str(round(combined_Ak['LeadingAk15Eff'].mean(),2)) + r', $M = $' + str(round(combined_Ak['LeadingAk15Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['LeadingAk15Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['LeadingAk15Eff'].mean()/combined_Ak['LeadingAk15Eff'].std(),2)), size = 8)
plt.text(.2, 3.5, r"$r = 1.2:\;\mu$ = " + str(round(combined_Ak['LeadingAk12Eff'].mean(),2)) + r', $M = $' + str(round(combined_Ak['LeadingAk12Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['LeadingAk12Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['LeadingAk12Eff'].mean()/combined_Ak['LeadingAk12Eff'].std(),2)), size = 8)
plt.text(.2, 3, r"$r = 1.0:\;\mu$ = " + str(round(combined_Ak['LeadingAk10Eff'].mean(),2)) + r', $M = $' + str(round(combined_Ak['LeadingAk10Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['LeadingAk10Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['LeadingAk10Eff'].mean()/combined_Ak['LeadingAk10Eff'].std(),2)), size = 8)
plt.text(.2, 2.5, r"$r = 0.8:\;\mu$ = " + str(round(combined_Ak['LeadingAk8Eff'].mean(),2)) + r', $M = $' + str(round(combined_Ak['LeadingAk8Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Ak['LeadingAk8Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Ak['LeadingAk8Eff'].mean()/combined_Ak['LeadingAk8Eff'].std(),2)), size = 8)
plt.title(r'Efficiency for Varying Ak Algorithm Cone Sizes')
plt.xlabel(r'Efficiency')
plt.ylabel('Frequency')
plt.xlim(0,1)
plt.legend(loc = 'upper center')
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/AkEff.png')

plt.clf()

##### Strips
StripFrames = []
for file in Strip_files:
    df = pd.read_csv('/eos/user/g/gdecastr/SUEPCoffea_dask/RebuildingSUEP/csvs_Private/' + file)
    StripFrames.append(df)

combined_Strip = pd.concat(StripFrames, ignore_index=True)

plt.hist(combined_Strip['Strip20DeltaR2'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = 2$', density = True, histtype='step')
plt.hist(combined_Strip['Strip15DeltaR2'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = 1.5$', density = True, histtype='step')
plt.hist(combined_Strip['Strip10DeltaR2'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = 1.0$', density = True, histtype='step')
plt.hist(combined_Strip['Strip75DeltaR2'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = .75$', density = True, histtype='step')
plt.hist(combined_Strip['Strip5DeltaR2'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = .5$', density = True, histtype='step')
plt.text(.3, 5.0, r"Strip $\Delta\eta = 2:\;\mu$ = " + str(round(combined_Strip['Strip20DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip20DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip20DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip20DeltaR2'].mean()/combined_Strip['Strip20DeltaR2'].std(),2)), size = 8)
plt.text(.3, 4.5, r"Strip $\Delta\eta = 1.5:\;\mu$ = " + str(round(combined_Strip['Strip15DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip15DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip15DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip15DeltaR2'].mean()/combined_Strip['Strip15DeltaR2'].std(),2)), size = 8)
plt.text(.3, 4.0, r"Strip $\Delta\eta = 1.0:\;\mu$ = " + str(round(combined_Strip['Strip10DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip10DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip10DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip10DeltaR2'].mean()/combined_Strip['Strip10DeltaR2'].std(),2)), size = 8)
plt.text(.3, 3.5, r"Strip $\Delta\eta = .75:\;\mu$ = " + str(round(combined_Strip['Strip75DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip75DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip75DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip75DeltaR2'].mean()/combined_Strip['Strip75DeltaR2'].std(),2)), size = 8)
plt.text(.3, 3.0, r"Strip $\Delta\eta = .5:\;\mu$ = " + str(round(combined_Strip['Strip5DeltaR2'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip5DeltaR2'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip5DeltaR2'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip5DeltaR2'].mean()/combined_Strip['Strip5DeltaR2'].std(),2)), size = 8)

plt.title(r'$dR^2$ between Cluster and Gen Higgs for Varying Strip Sizes')
plt.xlabel(r'$dR^2$')
plt.ylabel('Frequency')
plt.xlim(0,1)
plt.legend()
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/StripdR2.png')

plt.clf()

plt.hist(combined_Strip['Strip20BetaRes'], bins = np.linspace(-.5,1,30), label = r'Strip $\Delta\eta = 2$', density = True, histtype='step')
plt.hist(combined_Strip['Strip15BetaRes'], bins = np.linspace(-.5,1,30), label = r'Strip $\Delta\eta = 1.5$', density = True, histtype='step')
plt.hist(combined_Strip['Strip10BetaRes'], bins = np.linspace(-.5,1,30), label = r'Strip $\Delta\eta = 1.0$', density = True, histtype='step')
plt.hist(combined_Strip['Strip75BetaRes'], bins = np.linspace(-.5,1,30), label = r'Strip $\Delta\eta = .75$', density = True, histtype='step')
plt.hist(combined_Strip['Strip5BetaRes'], bins = np.linspace(-.5,1,30), label = r'Strip $\Delta\eta = .5$', density = True, histtype='step')
plt.text(.3, 2.75, r"Strip $\Delta\eta = 2:\;\mu$ = " + str(round(combined_Strip['Strip20BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip20BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip20BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip20BetaRes'].mean()/combined_Strip['Strip20BetaRes'].std(),2)), size = 6)
plt.text(.3, 2.5, r"Strip $\Delta\eta = 1.5:\;\mu$ = " + str(round(combined_Strip['Strip15BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip15BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip15BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip15BetaRes'].mean()/combined_Strip['Strip15BetaRes'].std(),2)), size = 6)
plt.text(.3, 2.25, r"Strip $\Delta\eta = 1.0:\;\mu$ = " + str(round(combined_Strip['Strip10BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip10BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip10BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip10BetaRes'].mean()/combined_Strip['Strip10BetaRes'].std(),2)), size = 6)
plt.text(.3, 2.0, r"Strip $\Delta\eta = .75:\;\mu$ = " + str(round(combined_Strip['Strip75BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip75BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip75BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip75BetaRes'].mean()/combined_Strip['Strip75BetaRes'].std(),2)), size = 6)
plt.text(.3, 1.75, r"Strip $\Delta\eta = .5:\;\mu$ = " + str(round(combined_Strip['Strip5BetaRes'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip5BetaRes'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip5BetaRes'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip5BetaRes'].mean()/combined_Strip['Strip5BetaRes'].std(),2)), size = 6)

plt.title(r'$\beta$ resolution between Cluster and Gen Higgs for Varying Strip Sizes')
plt.xlabel(r'$\frac{\beta_{Strip} - \beta_{Gen}}{\beta_{Gen}}$')
plt.ylabel('Frequency')
plt.legend()
plt.xlim(-.5,1)
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/StripBetaRes.png')

plt.clf()

plt.hist(combined_Strip['Strip20Purity'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = 2$', density = True, histtype='step')
plt.hist(combined_Strip['Strip15Purity'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = 1.5$', density = True, histtype='step')
plt.hist(combined_Strip['Strip10Purity'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = 1.0$', density = True, histtype='step')
plt.hist(combined_Strip['Strip75Purity'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = .75$', density = True, histtype='step')
plt.hist(combined_Strip['Strip5Purity'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = .5$', density = True, histtype='step')
plt.text(.2, 5.0, r"Strip $\Delta\eta = 2:\;\mu$ = " + str(round(combined_Strip['Strip20Purity'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip20Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip20Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip20Purity'].mean()/combined_Strip['Strip20Purity'].std(),2)), size = 8)
plt.text(.2, 4.5, r"Strip $\Delta\eta = 1.5:\;\mu$ = " + str(round(combined_Strip['Strip15Purity'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip15Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip15Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip15Purity'].mean()/combined_Strip['Strip15Purity'].std(),2)), size = 8)
plt.text(.2, 4.0, r"Strip $\Delta\eta = 1.0:\;\mu$ = " + str(round(combined_Strip['Strip10Purity'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip10Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip10Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip10Purity'].mean()/combined_Strip['Strip10Purity'].std(),2)), size = 8)
plt.text(.2, 3.5, r"Strip $\Delta\eta = .75:\;\mu$ = " + str(round(combined_Strip['Strip75Purity'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip75Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip75Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip75Purity'].mean()/combined_Strip['Strip75Purity'].std(),2)), size = 8)
plt.text(.2, 3.0, r"Strip $\Delta\eta = .5:\;\mu$ = " + str(round(combined_Strip['Strip5Purity'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip5Purity'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip5Purity'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip5Purity'].mean()/combined_Strip['Strip5Purity'].std(),2)), size = 8)

plt.title(r'Purity for Varying Strip Sizes')
plt.xlabel(r'Purity')
plt.ylabel('Frequency')
plt.legend(loc = 'upper center')
plt.xlim(0,1)
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/StripPurity.png')

plt.clf()

plt.hist(combined_Strip['Strip20Eff'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = 2$', density = True, histtype='step')
plt.hist(combined_Strip['Strip15Eff'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = 1.5$', density = True, histtype='step')
plt.hist(combined_Strip['Strip10Eff'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = 1.0$', density = True, histtype='step')
plt.hist(combined_Strip['Strip75Eff'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = .75$', density = True, histtype='step')
plt.hist(combined_Strip['Strip5Eff'], bins = np.linspace(0,1,30), label = r'Strip $\Delta\eta = .5$', density = True, histtype='step')
plt.text(.2, 10.0, r"Strip $\Delta\eta = 2:\;\mu$ = " + str(round(combined_Strip['Strip20Eff'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip20Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip20Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip20Eff'].mean()/combined_Strip['Strip20Eff'].std(),2)), size = 8)
plt.text(.2, 9.0, r"Strip $\Delta\eta = 1.5:\;\mu$ = " + str(round(combined_Strip['Strip15Eff'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip15Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip15Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip15Eff'].mean()/combined_Strip['Strip15Eff'].std(),2)), size = 8)
plt.text(.2, 8.0, r"Strip $\Delta\eta = 1.0:\;\mu$ = " + str(round(combined_Strip['Strip10Eff'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip10Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip10Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip10Eff'].mean()/combined_Strip['Strip10Eff'].std(),2)), size = 8)
plt.text(.2, 7.0, r"Strip $\Delta\eta = .75:\;\mu$ = " + str(round(combined_Strip['Strip75Eff'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip75Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip75Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip75Eff'].mean()/combined_Strip['Strip75Eff'].std(),2)), size = 8)
plt.text(.2, 6.0, r"Strip $\Delta\eta = .5:\;\mu$ = " + str(round(combined_Strip['Strip5Eff'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip5Eff'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip5Eff'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip5Eff'].mean()/combined_Strip['Strip5Eff'].std(),2)), size = 8)
plt.title(r'Efficiency for Varying Strip Sizes')
plt.xlabel(r'Efficiency')
plt.ylabel('Frequency')
plt.xlim(0,1)
plt.legend(loc = 'upper center')
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/StripEff.png')

plt.clf()

plt.hist(combined_Strip['Strip20Center'], bins = np.linspace(-2.5,2.5,25), label = r'Strip $\Delta\eta = 2$', density = True, histtype='step')
plt.hist(combined_Strip['Strip15Center'], bins =  np.linspace(-2.5,2.5,25), label = r'Strip $\Delta\eta = 1.5$', density = True, histtype='step')
plt.hist(combined_Strip['Strip10Center'], bins =  np.linspace(-2.5,2.5,25), label = r'Strip $\Delta\eta = 1.0$', density = True, histtype='step')
plt.hist(combined_Strip['Strip75Center'], bins =  np.linspace(-2.5,2.5,25), label = r'Strip $\Delta\eta = .75$', density = True, histtype='step')
plt.hist(combined_Strip['Strip5Center'], bins =  np.linspace(-2.5,2.5,25), label = r'Strip $\Delta\eta = .5$', density = True, histtype='step')
plt.text(.3, 5.0, r"Strip $\Delta\eta = 2:\;\mu$ = " + str(round(combined_Strip['Strip20Center'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip20Center'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip20Center'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip20Center'].mean()/combined_Strip['Strip20Center'].std(),2)), size = 8)
plt.text(.3, 4.5, r"Strip $\Delta\eta = 1.5:\;\mu$ = " + str(round(combined_Strip['Strip15Center'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip15Center'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip15Center'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip15Center'].mean()/combined_Strip['Strip15Center'].std(),2)), size = 8)
plt.text(.3, 4.0, r"Strip $\Delta\eta = 1.0:\;\mu$ = " + str(round(combined_Strip['Strip10Center'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip10Center'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip10Center'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip10Center'].mean()/combined_Strip['Strip10Center'].std(),2)), size = 8)
plt.text(.3, 3.5, r"Strip $\Delta\eta = .75:\;\mu$ = " + str(round(combined_Strip['Strip75Center'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip75Center'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip75Center'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip75Center'].mean()/combined_Strip['Strip75Center'].std(),2)), size = 8)
plt.text(.3, 3.0, r"Strip $\Delta\eta = .5:\;\mu$ = " + str(round(combined_Strip['Strip5Center'].mean(),2)) + r', $M = $' + str(round(combined_Strip['Strip5Center'].median(),2)) + r'$, \sigma$ = ' + str(round(combined_Strip['Strip5Center'].std(),2)) + r', $\frac{\mu}{\sigma} = $' + str(round(combined_Strip['Strip5Center'].mean()/combined_Strip['Strip5Center'].std(),2)), size = 8)
plt.title(r'Distribution of Eta Center for Varying Strip Sizes')
plt.xlabel(r'Eta Center')
plt.ylabel('Frequency')
plt.xlim(-2.5,2.5)
plt.legend()
plt.savefig('/eos/user/g/gdecastr/www/JetAlgorithms_Private/StripCenter.png')

plt.clf()